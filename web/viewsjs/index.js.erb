<%
# This is the maximum number of tags in the tag cloud. Javascript code will only show
# as many of them as will fit in the window.
tagcloud_number_of_keys = 300
tagcloud_number_of_tags = 30
tagcloud_number_of_relations = 30
keys = @db.select("SELECT key, scale1 FROM popular_keys ORDER BY scale1 DESC LIMIT #{ tagcloud_number_of_keys }").
    execute().
    each_with_index{ |tag, idx| tag['pos'] = (tagcloud_number_of_keys - idx) / tagcloud_number_of_keys.to_f }
tags = @db.select("SELECT skey, svalue FROM top_tags WHERE skey NOT IN ('source', 'source_ref', 'attribution') ORDER BY count_all DESC LIMIT #{ tagcloud_number_of_tags }").execute()
relations = @db.select("SELECT rtype FROM db.relation_types ORDER BY count DESC LIMIT #{ tagcloud_number_of_relations }").execute()
%>

const keys_data = <%= keys.map{ |tag| { :text => tag['key'], :size => tagcloud_size(tag) } }.to_json.gsub(/\},/, "},\n") %>;
const tags_data = <%= tags.map{ |entry| [ entry['skey'], entry['svalue'] ] }.to_json.gsub(/\],/, "],\n") %>;
const relations_data = <%= relations.map{ |row| row['rtype'] }.to_json.gsub(/\],/, "],\n") %>;
const font_family = 'Impact';
const font_weight = 'normal';

up = function() {};

function draw(words, width, height) {
    // This color scheme isn't available in newer D3 versions, but we'll keep
    // it for the time being.
    const category20b = [ 3750777, 5395619, 7040719, 10264286, 6519097, 9216594, 11915115,
                          13556636, 9202993, 12426809, 15186514, 15190932, 8666169, 11356490,
                          14049643, 15177372, 8077683, 10834324, 13528509, 14589654 ].map(
                            value => new d3.rgb(value >> 16, value >> 8 & 255, value & 255));
    const fill = d3.scaleOrdinal(category20b);

    d3.select('div#tagcloud').append('svg')
        .append('g')
            .attr('transform', 'translate(' + width/2 + ',' + height/2 + ')')
            .selectAll('text')
                .data(words)
                .enter()
                .append('svg:a')
                    .attr('xlink:href', d => url_for_key(d.text))
                    .append('text')
                    .style('font-size', d => d.size + 'px')
                    .style('font-family', font_family)
                    .style('font-weight', font_weight)
                    .style('fill', (d, i) => d3.rgb(fill(i)).darker(0.5))
                    .attr('text-anchor', 'middle')
                    .attr('transform', function(d) {
                        return 'translate(' + [d.x, d.y] + ')rotate(' + d.rotate + ')';
                    })
                    .text(d => d.text);
}

function resize_home() {
    fill_list('key_list', keys_data, (d) => link_to_key(d.text));
    fill_list('tag_list', tags_data, (d) => link_to_tag(d[0], d[1]));
    fill_list('relation_list', relations_data, (d) => link_to_rtype(d));

    const tagcloud = document.getElementById('tagcloud');
    tagcloud.innerHTML = '';
    if (tagcloud.offsetParent === null) {
        return;
    }

    const width = tagcloud.getBoundingClientRect().width;
    const height = tagcloud.getBoundingClientRect().height;

    // The cloud function mangles the data in the words array, so we need to clone it
    let data = keys_data.map(function(d) {
        return Object.assign({}, d);
    });

    d3.layout.cloud().size([width, height])
        .words(data)
        .timeInterval(10)
        .rotate(function() { return ~~(Math.random() * 5) * 30 - 60; })
        .font(font_family)
        .fontWeight(font_weight)
        .fontSize(d => d.size)
        .on('end', (words) => draw(words, width, height))
        .start();
}

function fill_list(list_name, data, func) {
    const element = document.getElementById(list_name);

    let i = 0;
    let texts = [];
    while (element.clientHeight < element.parentNode.clientHeight - 16) {
        const text = func(data[i]);
        texts.push(text);
        element.innerHTML += text + '&nbsp;&bull; ';
        i++;
    }
    texts.pop();
    texts.pop();
    element.innerHTML = texts.join('&nbsp;&bull; ') + '...';
}

var timeout_id = 0;

function trigger_resize() {
    if (timeout_id != 0) {
        window.clearTimeout(timeout_id);
    }
    timeout_id = window.setTimeout(resize_home, 100);
}

function page_init() {
    window.addEventListener('resize', trigger_resize);
    resize_home();
}
