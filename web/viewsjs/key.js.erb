<%
    osm = @trans.t.osm
    misc = @trans.t.misc
    taginfo = @trans.t.taginfo
    page = @trans.t.pages.key
 %>
const tabsConfig = {
    overview: function(key, filter_type) {
        return [
            new DynamicTable('grid-overview', {
                url: '/api/4/key/stats',
                params: { key: key },
                colModel: [
                    { display: '<%= h(misc.object_type) %>', name: 'type', width: 100 },
                    { display: '<%= h(page.number_objects) %>', name: 'count', width: 260, align: 'center' },
                    { display: '<%= h(page.number_values) %>', name: 'value', width: 140, align: 'right' }
                ],
                usePager: false,
                preProcess: function(data) {
                    return {
                        total: 4,
                        page: 1,
                        rows: data.data.map(function(row) {
                            return { 'cell': [
                                fmt_type_image(row.type),
                                fmt_value_with_percent(row.count, row.count_fraction),
                                fmt_with_ts(row.values)
                            ]};
                        })
                    };
                }
            }),
            new ChartValues(key, filter_type)
        ];
    },
    values: function(key, filter_type, lang) {
        return new DynamicTable('grid-values', {
            url: '/api/4/key/values',
            params: { key: key, filter: filter_type, lang: lang },
            colModel: [
                { display: '<%= h(osm.value) %>', name: 'value', width: 200, sortable: true },
                { display: '<%= h(misc.count) %>', name: 'count', width: 260, sortable: true, align: 'center' },
                { display: '<%= h(taginfo.wiki) %>', name: 'in_wiki', width: 25, sortable: true, align: 'center', title: '<%= h(misc.in_wiki_tooltip) %>' },
                { display: '<%= h(misc.description) %>', name: 'description', width: 200, sortable: false, align: 'left', title: '<%= h(page.tag_description_from_wiki) %>' }
            ],
            searchitems: [
                { display: '<%= h(osm.value) %>', name: 'value' }
            ],
            sortname: 'count',
            sortorder: 'desc',
            preProcess: function(data) {
                data.rows = data.data.map(function(row) {
                    return { 'cell': [
                        hover_expand(link_to_value(key, row.value)),
                        fmt_value_with_percent(row.count, row.fraction),
                        link_to_tag_with_tab(key, row.value, 'wiki', fmt_checkmark(row.in_wiki)),
                        fmt_desc(row.desclang, row.descdir, row.description)
                    ] };
                });
                delete data.data;
                return data;
            }
        });
    },
    combinations: function(key, filter_type) {
        return new DynamicTable('grid-combinations', {
            url: '/api/4/key/combinations',
            params: { key: key, filter: filter_type },
            colModel: [
                { display: '<%= h(misc.count) %> &rarr;', name: 'to_count', width: 260, sortable: true, align: 'center', title: '<%= h(page.other_keys_used.to_count_tooltip) %>' },
                { display: '<%= h(page.other_keys_used.other) %>', name: 'other_key', width: 400, sortable: true, title: '<%= h(page.other_keys_used.other_key_tooltip) %>' },
                { display: '&rarr; <%= h(misc.count) %>', name: 'from_count', width: 260, sortable: true, align: 'center', title: '<%= h(page.other_keys_used.from_count_tooltip) %>' }
            ],
            searchitems: [
                { display: '<%= h(page.other_keys_used.other) %>', name: 'other_key' }
            ],
            sortname: 'to_count',
            sortorder: 'desc',
            preProcess: function(data) {
                data.rows = data.data.map(function(row) {
                    return { 'cell': [
                        fmt_value_with_percent(row.together_count, row.to_fraction),
                        hover_expand(link_to_key(row.other_key)),
                        fmt_value_with_percent(row.together_count, row.from_fraction),
                    ] };
                });
                return data;
            }
        });
    },
    similar: function(key) {
        return new DynamicTable('grid-similar', {
            url: '/api/4/key/similar',
            params: { key: key },
            colModel: [
                { display: '<%= h(page.similar.other) %>', name: 'other_key', width: 300, sortable: true },
                { display: '<%= h(misc.count) %>', name: 'count_all', width: 60, sortable: true, align: 'right', title: '<%= h(page.similar.count_all_tooltip) %>' },
                { display: '<%= h(page.similar.similarity) %>', name: 'similarity', width: 60, sortable: true, align: 'right', title: '<%= h(page.similar.similarity_tooltip) %>' }
            ],
            searchitems: [
                { display: '<%= h(page.similar.other) %>', name: 'other_key' }
            ],
            sortname: 'other_key',
            sortorder: 'asc',
            preProcess: function(data) {
                data.rows = data.data.map(function(row) {
                    return { 'cell': [
                        hover_expand(link_to_key_with_highlight(row.other_key, key)),
                        row.count_all,
                        row.similarity
                    ] };
                });
                return data;
            }
        });
    },
    chronology: function(key) {
        return new ChartChronology(build_link('/api/4/key/chronology', { key: key }), filter.value);
    },
    wiki: function(key, filter_type) {
        return new DynamicTable('grid-wiki', {
            url: '/api/4/key/wiki_pages',
            params: { key: key },
            colModel: [
                { display: '<%= h(misc.language) %>', name: 'lang', width: 150, sortable: false },
                { display: '<%= h(page.wiki_pages.wiki_page) %>', name: 'title', width: 160, sortable: false, align: 'right' },
                { display: '<%= h(misc.description) %>', name: 'description', width: 400, sortable: false },
                { display: '<%= h(misc.image) %>', name: 'image', width: 120, sortable: false },
                { display: '<%= h(osm.objects) %>', name: 'objects', width:  80, sortable: false },
                { display: '<%= h(misc.status) %>', name: 'status', width: 60, sortable: false, title: '<%= h(misc.approval_status) %>' },
                { display: '<%= h(page.wiki_pages.implied_tags) %>', name: 'tags_implied', width: 120, sortable: false },
                { display: '<%= h(page.wiki_pages.combined_tags) %>', name: 'tags_combination', width: 120, sortable: false },
                { display: '<%= h(page.wiki_pages.linked_tags) %>', name: 'tags_linked', width: 220, sortable: false }
            ],
            usePager: false,
            preProcess: function(data) {
                data.rows = data.data.map(function(row) {
                    return { 'cell': [
                        fmt_language(row.lang, row.dir, row.language, row.language_en),
                        link_to_wiki(row.title),
                        fmt_desc(row.lang, row.dir, row.description),
                        fmt_wiki_image_popup(row.image),
                        fmt_type_icon('node',     row.on_node) +
                        fmt_type_icon('way',      row.on_way) +
                        fmt_type_icon('area',     row.on_area) +
                        fmt_type_icon('relation', row.on_relation),
                        fmt_status(row.status),
                        fmt_key_or_tag_list(row.tags_implies),
                        fmt_key_or_tag_list(row.tags_combination),
                        fmt_key_or_tag_list(row.tags_linked)
                    ] };
                });
                return data;
            }
        });
    },
    projects: function(key, filter_type) {
        return new DynamicTable('grid-projects', {
            url: '/api/4/key/projects',
            params: { key: key, filter: filter_type },
            colModel: [
                { display: '<%= h(taginfo.project) %>', name: 'project_name', width: 280, sortable: true },
                { display: '<%= h(osm.tag) %>', name: 'tag', width: 220, sortable: true },
                { display: '<%= h(osm.objects) %>', name: 'objects', width:  80, sortable: false },
                { display: '<%= h(page.projects.description) %>', name: 'description', width: 200, sortable: false, align: 'left' }
            ],
            searchitems: [
                { display: '<%= h(taginfo.project) %>/<%= h(osm.value) %>', name: 'project_value' }
            ],
            sortname: 'tag',
            sortorder: 'asc',
            preProcess: function(data) {
                data.rows = data.data.map(function(row) {
                    return { 'cell': [
                        hover_expand(link_to_project(row.project_id, row.project_name)),
                        hover_expand(row.value === null ? (link_to_key(row.key) + '=*') : link_to_tag(row.key, row.value)),
                        fmt_type_icon('node',     row.on_node) +
                        fmt_type_icon('way',      row.on_way) +
                        fmt_type_icon('area',     row.on_area) +
                        fmt_type_icon('relation', row.on_relation),
                        project_tag_desc(row.description, row.icon_url, row.doc_url)
                    ] };
                });
                return data;
            }
        });
    },
    characters: function(key, filter_type) {
        return createCharactersTable(key);
    }
};

class ChartValues {
    id = 'chart-values';
    key;
    url;
    data;

    constructor(key, filter) {
        this.key = key;
        this.url = build_link('/api/4/key/prevalent_values', { min_fraction: 0.02, key: key, filter: filter });
    }

    async load() {
        const response = await fetch(this.url);
        const json = await response.json();
        this.data = json.data;
        this.draw();
    }

    colors() {
        return ['#1f77b4', '#aec7e8', '#ff7f0e', '#ffbb78', '#2ca02c',
                '#98df8a', '#d62728', '#ff9896', '#9467bd', '#c5b0d5',
                '#8c564b', '#c49c94', '#e377c2', '#f7b6d2', '#7f7f7f',
                '#c7c7c7', '#bcbd22', '#dbdb8d', '#17becf', '#9edae5'];
    }

    draw() {
        set_inner_html_to('canvas-values', '');
        const max_height = window.innerHeight - 300;
        const width = 160;
        const height = Math.min(440, max_height);
        const max = document.getElementById('canvas-values').dataset.count;

        let y = 0;
        this.data.forEach(function(d) {
            d['y'] = y;
            y += d['count'];
            if (d.value === null) {
                d.label = '(other)';
            } else {
                d.label = d.value;
            }
        });

        const scale = d3.scaleLinear()
                        .domain([0, max])
                        .range([0, height]);

        const color = d3.scaleOrdinal()
                        .range(this.colors());

        const chart = d3.select('#canvas-values').append('svg')
                        .attr('width', width)
                        .attr('height', height);

        chart.selectAll('rect')
            .data(this.data)
            .enter()
            .append('svg:a')
                .attr('href', d => url_for_tag(this.key, d.label))
                .attr('transform', d => 'translate(10, ' + scale(d['y']) + ')')
                .call(function(c) {
                    c.append('rect')
                        .attr('width', 20)
                        .attr('height', d => scale(d['count']))
                        .style('fill', (d, i) => color(i));
                })
                .append('text')
                    .attr('x', 25)
                    .attr('y', d => scale(d['count'] / 2))
                    .attr('dy', '0.5em')
                    .text(d => d.label);

        const other = document.querySelector('svg a[href$="(other)"]');
        if (other) {
            other.removeAttribute('href');
            other.style.textDecoration = 'none';
        }
    }

    resize() {
        this.draw();
    }
} // class ChartValues

function page_init() {
    up = function() { window.location = build_link('/keys'); }
    activate_josm_button();

    const filter = document.getElementById('filter');
    filter.addEventListener('change', function(element) {
        window.location.search = new URLSearchParams({ 'filter': element.target.value });
    });

    const h1 = document.querySelector('h1');
    const key = h1.dataset.key;
    h1.innerHTML = fmt_key(key);

    new ComparisonListDisplay(key);

    initTabs(tabsConfig, [key, filter.value, '<%= r18n.locale.code %>']);
}
