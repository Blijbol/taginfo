<%
    osm = @trans.t.osm
    misc = @trans.t.misc
    taginfo = @trans.t.taginfo
    page = @trans.t.pages.tag
 %>
function link_to_key_or_tag(key, value) {
    let link = link_to_key(key) + '=';
    if (value && value != '') {
        link += link_to_value(key, value, { 'class': 'pref' });
    } else {
        link += '*';
    }
    return link;
}

const tabsConfig = {
    overview: function(key, value, filter_type) {
        return new DynamicTable('grid-overview', {
            url: '/api/4/tag/stats',
            params: { key: key, value: value },
            colModel: [
                { display: '<%= h(misc.object_type) %>', name: 'type', width: 100 },
                { display: '<%= h(page.number_objects) %>', name: 'count', width: 260, align: 'center' }
            ],
            usePager: false,
            preProcess: function(data) {
                return {
                    total: 4,
                    page: 1,
                    rows: data.data.map(function(row) {
                        return { 'cell': [
                            fmt_type_image(row.type),
                            fmt_value_with_percent(row.count, row.count_fraction)
                        ]};
                    })
                };
            }
        });
    },
    combinations: function(key, value, filter_type) {
        return new DynamicTable('grid-combinations', {
            url: '/api/4/tag/combinations',
            params: { key: key, value: value, filter: filter_type },
            colModel: [
                { display: '<%= h(misc.count) %> &rarr;', name: 'to_count', width: 260, sortable: true, align: 'center', title: '<%= h(page.other_tags_used.to_count_tooltip) %>' },
                { display: '<%= h(page.other_tags_used.other) %>', name: 'other_tag', width: 400, sortable: true, title: '<%= h(page.other_tags_used.other_key_tooltip) %>' },
                { display: '&rarr; <%= h(misc.count) %>', name: 'from_count', width: 260, sortable: true, align: 'center', title: '<%= h(page.other_tags_used.from_count_tooltip) %>' }
            ],
            searchitems: [
                { display: '<%= h(page.other_tags_used.other) %>', name: 'other_tag' }
            ],
            sortname: 'to_count',
            sortorder: 'desc',
            preProcess: function(data) {
                data.rows = data.data.map(function(row) {
                    return { 'cell': [
                        fmt_value_with_percent(row.together_count, row.to_fraction),
                        hover_expand(link_to_key_or_tag(row.other_key, row.other_value)),
                        fmt_value_with_percent(row.together_count, row.from_fraction),
                    ] };
                });
                return data;
            }
        });
    },
    chronology: function(key, value) {
        return new ChartChronology(build_link('/api/4/tag/chronology', { key: key, value: value }), filter.value);
    },
    wiki: function(key, value) {
        if (!document.getElementById('grid-wiki')) {
            return [];
        }
        return new DynamicTable('grid-wiki', {
            url: '/api/4/tag/wiki_pages',
            params: { key: key, value: value },
            colModel: [
                { display: '<%= h(misc.language) %>', name: 'lang', width: 150, sortable: false },
                { display: '<%= h(page.wiki_pages.wiki_page) %>', name: 'title', width: 200, sortable: false, align: 'right' },
                { display: '<%= h(misc.description) %>', name: 'description', width: 400, sortable: false },
                { display: '<%= h(misc.image) %>', name: 'image', width: 120, sortable: false },
                { display: '<%= h(osm.objects) %>', name: 'objects', width:  80, sortable: false },
                { display: '<%= h(misc.status) %>', name: 'status', width: 60, sortable: false, title: '<%= h(misc.approval_status) %>' },
                { display: '<%= h(page.wiki_pages.implied_tags) %>', name: 'tags_implied', width: 120, sortable: false },
                { display: '<%= h(page.wiki_pages.combined_tags) %>', name: 'tags_combination', width: 120, sortable: false },
                { display: '<%= h(page.wiki_pages.linked_tags) %>', name: 'tags_linked', width: 220, sortable: false }
            ],
            usePager: false,
            preProcess: function(data) {
                data.rows = data.data.map(function(row) {
                    return { 'cell': [
                        fmt_language(row.lang, row.dir, row.language, row.language_en),
                        link_to_wiki(row.title),
                        fmt_desc(row.lang, row.dir, row.description),
                        fmt_wiki_image_popup(row.image),
                        fmt_type_icon('node',     row.on_node) +
                        fmt_type_icon('way',      row.on_way) +
                        fmt_type_icon('area',     row.on_area) +
                        fmt_type_icon('relation', row.on_relation),
                        fmt_status(row.status),
                        fmt_key_or_tag_list(row.tags_implies),
                        fmt_key_or_tag_list(row.tags_combination),
                        fmt_key_or_tag_list(row.tags_linked)
                    ] };
                });
                return data;
            }
        });
    },
    projects: function(key, value, filter_type) {
        return new DynamicTable('grid-projects', {
            url: '/api/4/tag/projects',
            params: { key: key, value: value, filter: filter_type },
            colModel: [
                { display: '<%= h(taginfo.project) %>', name: 'project_name', width: 280, sortable: true },
                { display: '<%= h(osm.tag) %>', name: 'tag', width: 220, sortable: true },
                { display: '<%= h(osm.objects) %>', name: 'objects', width:  80, sortable: false },
                { display: '<%= h(page.projects.description) %>', name: 'description', width: 200, sortable: false, align: 'left' }
            ],
            searchitems: [
                { display: '<%= h(taginfo.project) %>', name: 'project_name' }
            ],
            sortname: 'tag',
            sortorder: 'asc',
            preProcess: function(data) {
                data.rows = data.data.map(function(row) {
                    return { 'cell': [
                        hover_expand(link_to_project(row.project_id, row.project_name)),
                        hover_expand(row.value === null ? (link_to_key(row.key) + '=*') : link_to_tag(row.key, row.value)),
                        fmt_type_icon('node',     row.on_node) +
                        fmt_type_icon('way',      row.on_way) +
                        fmt_type_icon('area',     row.on_area) +
                        fmt_type_icon('relation', row.on_relation),
                        project_tag_desc(row.description, row.icon_url, row.doc_url)
                    ] };
                });
                return data;
            }
        });
    },
    characters: function(key, value, filter_type) {
        return createCharactersTable(value);
    }
};

function page_init() {
    activate_josm_button();

    const filter = document.getElementById('filter');
    filter.addEventListener('change', function(element) {
        window.location.search = new URLSearchParams({ 'filter': element.target.value });
    });

    const h1 = document.querySelector('h1');
    const key = h1.dataset.key;
    const value = h1.dataset.value;
    up = function() { window.location = url_for_key(key); };
    h1.innerHTML = link_to_key(key) + '=' + fmt_value(value);

    new ComparisonListDisplay(key, value);

    set_inner_html_to('keylink', link_to_key(key));
    set_inner_html_to('relationlink', link_to_rtype(value));

    initTabs(tabsConfig, [key, value, filter.value]);
}
